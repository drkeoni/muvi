song {
  name = "245"
  bufferSize = 1024
}

sketch {
  width = 2700
  height = 1400

  background {
    r = 196.0
    g = 90.0
    b = 15.0
  }

  canvas {
    // Increasing these parameters will slow down the simulation
    width = 900
    height = 900
    period = 120.0
    max_jitter = 1
  }

  mfcc_circles {
    outer_radius_factor = 0.4
    min_color {
      r = 130
      g = 125
      b = 245
    }
    max_color {
      r = 155
      g = 155
      b = 255
    }
  }

  camera {
    // in radians/sec
    ang_vel {
      y = 0.006
      z = 0.002
    }

    // in pixels/sec
    vel {
      x = 0.5
      y = 0.2
      z = 2.0
    }
  }

  // possible filters are invert,posterize2,posterize3,posterize4,threshold,dilate,blur,erode,gray
  filter_func = "blur+posterize3"
}

grayscott {
  delta = 1.12
  feed = 0.04309042
  kill = 0.056763

  // palette selection
  // For HSV palettes the ranges are ([0,360],[0,100],[0,100])
  // the numbers are minH_maxH_minS_maxS_minV_maxV
  // for hue, 0 is red, 45 is orange, 55 is a yellow
  // try hsv_43_245_125_339_125_200
  // or hsv_43_245_125_43_125_200
  // or hsv_202_25_50_202_35_99 for waves
  // or hsv_202_25_50_192_35_99
  // hsv_187_207_16_84_92_46
  // hsv_22_202_84_56_74_92 : reds, oranges, greens, blues
  palette = "hsv_22_102_84_29_74_92"
  //palette = "diverging2"
  // the colors of the palette are chosen using a linear equation with periodic boundary conditions
  color_intercept = 0
  color_slope = 1
  // shader file for solving the pde system
  pde_shader = "rd_frag_1sin_shapeddrift.glsl"
  // shader file for coloring the results
  color_shader = "rd_frag_2x10.glsl"
  //alphas = "0.04,0.17,0.19,0.2,0.21,0.25,0.3,0.5,0.7,0.8"
  alphas = "0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9"

  // if true, the colors come from the alpha thresholds and the palette
  // if false, the colors will be the actual u/v values in the reaction-diffusion system
  use_color_shader = true

  // The feed parameter changes linearly based on the squared distance from the center
  // the low value is feed_low_mult*feed
  // the high value is feed_high_mult*feed
  feed_low_mult = 0.5
  feed_high_mult = 0.1

  mod_mult = 1.1815
  mod_pct = 0.00165
  mod_offset = 0.329

  // the drift velocity of the rings
  velocity_mult = 2.22

  // for shaped drift, the number of nodes in the circle
  drift_mult = 167

  // in the inner reaction-diffusion loop, the image gets rescaled
  // by a random gaussian
  // smaller values start to blur the image more and break up stable structures
  jitter_sigma = 50.0

  init {
    n_circles = 290
    // square or circle
    shape = "square"
  }

  // increase to slow down the simulation
  num_steps_per_render = 3
}